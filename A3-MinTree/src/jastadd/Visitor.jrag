aspect Visitor {
	/**
	 * Visitor interface for Calc language. Each concrete node type must
	 * have a visit method.
	 */
	public interface Visitor {
		public Object visit(List node, Object data);
		public Object visit(Opt node, Object data);
		public Object visit(Program node, Object data);
		public Object visit(Func node, Object data);

		/*STAT*/
		public Object visit(Decl node, Object data);
		public Object visit(Assi node, Object data);
		public Object visit(If node, Object data);
		public Object visit(Else node, Object data);
		public Object visit(While node, Object data);
		public Object visit(Ret node, Object data);

		/*EXPR*/
		public Object visit(EqExp node, Object data);
		public Object visit(NeExp node, Object data);
		public Object visit(GtExp node, Object data);
		public Object visit(LtExp node, Object data);
		public Object visit(LeExp node, Object data);
		public Object visit(GeExp node, Object data);
		public Object visit(Mul node, Object data);
		public Object visit(Div node, Object data);
		public Object visit(Mod node, Object data);
		public Object visit(Add node, Object data);
		public Object visit(Sub node, Object data);
		public Object visit(Num node, Object data);
		
		public Object visit(IdUse node, Object data);
		public Object visit(Fcall node, Object data);
	}

	public Object ASTNode.accept(Visitor visitor, Object data) {
		throw new Error("Visitor: accept method not available for " + getClass().getName());
	}
	public Object List.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Opt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Program.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Func.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	/* STAT */
	public Object Decl.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Assi.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object If.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Else.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object While.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Ret.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	/* EXPR */
	public Object EqExp.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object NeExp.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object GtExp.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object LtExp.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object LeExp.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object GeExp.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Mul.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Div.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Mod.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Add.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Sub.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Num.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object IdUse.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

}
