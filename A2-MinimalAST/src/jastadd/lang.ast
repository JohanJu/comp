Program ::= Func*;
Func ::= <ID> Args:Stat* Stats:Stat*;

abstract Stat;
Decl : Stat ::= <ID> [Expr];
Assi : Stat ::= <ID> Expr;
If : Stat ::= Expr Stat* [Else];
Else : Stat ::= Stat*;
While : Stat ::= Expr Stat*;
Ret : Stat ::= Expr;

abstract Expr : Stat;
EqExp : Expr ::= Left:Expr  Right:Expr;
NeExp : Expr ::= Left:Expr  Right:Expr;
GtExp : Expr ::= Left:Expr  Right:Expr;
LtExp : Expr ::= Left:Expr  Right:Expr;
LeExp : Expr ::= Left:Expr  Right:Expr;
GeExp : Expr ::= Left:Expr  Right:Expr;
Fcall : Expr ::= <ID> Expr*;
Mul : Expr ::= Left:Expr Right:Expr;
Div : Expr ::= Left:Expr Right:Expr;
Mod : Expr ::= Left:Expr Right:Expr;
Add : Expr ::= Left:Expr Right:Expr;
Sub : Expr ::= Left:Expr Right:Expr;
Num : Expr ::= <NUM>;
IdUse : Expr ::= <ID>;

