Program ::= Func*;
Func ::= <ID> Args:Stat* Stats:Stat*;

abstract Stat;
Decl : Stat ::= <ID> [Expr];
Assi : Stat ::= <ID> Expr;
If : Stat ::= Expr Stat* [Else];
Else : Stat ::= Stat*;
While : Stat ::= Expr Stat*;
Ret : Stat ::= Expr;

abstract Expr : Stat;
Fcall : Expr ::= <ID> Expr*;
Num : Expr ::= <NUM>;
IdUse : Expr ::= <ID>;

abstract Binary: Expr ::= Left:Expr Right:Expr;
EqExp : Binary;
NeExp : Binary;
GtExp : Binary;
LtExp : Binary;
LeExp : Binary;
GeExp : Binary;
Mul : Binary;
Div : Binary;
Mod : Binary;
Add : Binary;
Sub : Binary;


