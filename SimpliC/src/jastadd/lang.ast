Program ::= Func*;
Func ::= <ID> Args:Stat* Stats:Stat*;
UnknownFunc : Func;
Type ::= <String>;

abstract Stat;
IdDecl : Stat ::= <ID> [Expr];
UnknownDecl : IdDecl;
Assi : Stat ::= IdUse Expr;
If : Stat ::= Expr Stat* [Else];
Else : Stat ::= Stat*;
While : Stat ::= Expr Stat*;
Ret : Stat ::= Expr;

abstract Expr : Stat;
Fcall : Expr ::= <ID> Expr*;
Num : Expr ::= <NUM>;
IdUse : Expr ::= <ID>;

abstract Binary: Expr ::= Left:Expr Right:Expr;
abstract Bool: Binary;
abstract Art: Binary;
EqExp : Bool;
NeExp : Bool;
GtExp : Bool;
LtExp : Bool;
LeExp : Bool;
GeExp : Bool;
Mul : Art;
Div : Art;
Mod : Art;
Add : Art;
Sub : Art;


