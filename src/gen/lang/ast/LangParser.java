package lang.ast;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class LangParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short NUMERAL = 2;
		static public final short NOT = 3;
		static public final short FOR = 4;
		static public final short IF = 5;
		static public final short EQ = 6;
		static public final short UNTIL = 7;
		static public final short DO = 8;
		static public final short OD = 9;
		static public final short THEN = 10;
		static public final short FI = 11;

		static public final String[] NAMES = {
			"EOF",
			"ID",
			"NUMERAL",
			"NOT",
			"FOR",
			"IF",
			"EQ",
			"UNTIL",
			"DO",
			"OD",
			"THEN",
			"FI"
		};
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9nbaESEmZ0CXAziIabRA1i9n2ZYDo$8EoFsC9UGG1KiVVRPSTpK07OeeOmAgd94#wFGiJ4" +
		"JGGCrn1XWY97r6Ufe5gePGhJ#kY8aw4AXXnHzZ3bRiIDXvfIB0S3R#dk1UOlp0MSKgtKlrx" +
		"x1Miky9gIAE6coXp6jbTOEsf0qIKh692DBCY1hspCbEPcHXQrjoSgRjN5QH0x5CwzFsTYtl" +
		"PV2sTpM7jwTjPVdDau#GLxob0Sya$jNtOo$oaNEZ2Sc8VyvuCP$A6uYvZOJRZ4okzQKq7a3" +
		"vCetyG==");

	static final Action RETURN9 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 9];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}

	private final Action[] actions;

	public LangParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] program = stmt
			Action.RETURN,	// [1] stmt = forStmt
			Action.RETURN,	// [2] stmt = ifStmt
			Action.RETURN,	// [3] stmt = assignment
			RETURN9,	// [4] forStmt = FOR ID EQ expr UNTIL expr DO stmt OD; returns 'OD' although none is marked
			RETURN5,	// [5] ifStmt = IF expr THEN stmt FI; returns 'FI' although none is marked
			RETURN3,	// [6] assignment = ID EQ expr; returns 'expr' although none is marked
			Action.RETURN,	// [7] expr = ID
			Action.RETURN,	// [8] expr = NUMERAL
			RETURN2	// [9] expr = NOT expr; returns 'expr' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
