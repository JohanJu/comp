aspect Visitor
{
    /**
     * Visitor interface for Calc language. Each concrete node type must
     * have a visit method.
     */
    public interface Visitor {
        public Object visit(List node, Object data);
        public Object visit(Opt node, Object data);
        public Object visit(Program node, Object data);
        public Object visit(Func node, Object data);
        public Object visit(Stat node, Object data);
        public Object visit(If node, Object data);
        public Object visit(While node, Object data);
    }

    public Object List.accept(Visitor visitor, Object data)
    {
        return visitor.visit(this, data);
    }
    public Object Opt.accept(Visitor visitor, Object data)
    {
        return visitor.visit(this, data);
    }
    public Object ASTNode.accept(Visitor visitor, Object data)
    {
        throw new Error("Visitor: accept method not available for " + getClass().getName());
    }
    public Object Program.accept(Visitor visitor, Object data)
    {
        return visitor.visit(this, data);
    }
    public Object Func.accept(Visitor visitor, Object data)
    {
        return visitor.visit(this, data);
    }
    public Object Stat.accept(Visitor visitor, Object data)
    {
        return visitor.visit(this, data);
    }
    public Object If.accept(Visitor visitor, Object data)
    {
        return visitor.visit(this, data);
    }
    public Object While.accept(Visitor visitor, Object data)
    {
        return visitor.visit(this, data);
    }
}
